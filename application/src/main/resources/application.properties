server.port=8090

spring.application.name=demo

management.endpoints.web.exposure.include=*


#### REDIS (RedisProperties)

# Database index used by the connection factory.
spring.redis.database=0

# Redis server host.
spring.redis.host=localhost

# Redis server port.
spring.redis.port=6379

# Login password of the redis server.
#spring.redis.password=

# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
#spring.redis.pool.max-active=8

# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
#spring.redis.pool.max-idle=8

# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
#spring.redis.pool.max-wait=-1

# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
#spring.redis.pool.min-idle=0

# Name of Redis server.
#spring.redis.sentinel.master=

# Comma-separated list of host:port pairs.
#spring.redis.sentinel.nodes=

# Connection timeout in milliseconds.
#spring.redis.timeout=0


##### Oauth 2 client
#
#spring.security.oauth2.client.registration.local.client-id=xxxxxxxxxxxx
#spring.security.oauth2.client.registration.local.client-secret=xxxxxxxxxxxx
##spring.security.oauth2.client.registration.local.authorization-grant-type=authorization_code
##spring.security.oauth2.client.registration.local.redirect-uri=http://localhost:${server.port}/index.html
#
#spring.security.oauth2.client.provider.local.authorization-uri=http://localhost:8070/oauth/authorize
#spring.security.oauth2.client.provider.local.token-uri=http://localhost:8070/oauth/token
#spring.security.oauth2.client.provider.local.user-info-uri=http://localhost:8070/me


spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:8090/test


